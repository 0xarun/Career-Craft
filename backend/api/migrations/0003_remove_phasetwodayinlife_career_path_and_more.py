# Generated by Django 5.2.1 on 2025-05-25 19:57

import django.db.models.deletion
from django.db import migrations, models
from django.db.migrations.operations.special import RunPython

def link_day_in_life_to_learning_page(apps, schema_editor):
    # We can't import the models directly as they may have changed since the migration was created.
    # Instead, we get the version of the models as they were when the migration was written.
    PhaseTwoDayInLife = apps.get_model('api', 'PhaseTwoDayInLife')
    CareerTrack = apps.get_model('api', 'CareerTrack') # Need old CareerTrack relation
    LearningPage = apps.get_model('api', 'LearningPage')

    # Note: In a real scenario, you might need to handle cases where a CareerTrack
    # doesn't have a LearningPage, or has multiple.
    # Assuming for this project that each CareerTrack has at least one LearningPage (page 1)
    # created by the signal, and we link to the first one.

    for day_in_life_instance in PhaseTwoDayInLife.objects.all():
        # Get the CareerTrack using the old field name from the model's state at this migration
        # This requires looking at the migration's state of the model, which RunPython handles.
        # However, accessing the old career_path directly via the ORM in RunPython is tricky
        # as the field is being removed. A common pattern is to add a *nullable* temporary
        # FK first, copy data, then remove the old and make the new non-nullable.
        # Given the error is on OneToOneField which is more restrictive, let's adjust approach:
        # Add the new field as nullable first, then populate, then alter the field to non-nullable.
        pass # The logic will be in a subsequent migration step or handled by making the field nullable initially

# Data migration to link existing PhaseTwoDayInLife instances to their LearningPage
def link_existing_phase_two_content_to_learning_pages(apps, schema_editor):
    PhaseTwoDayInLife = apps.get_model('api', 'PhaseTwoDayInLife')
    PhaseTwoFunFact = apps.get_model('api', 'PhaseTwoFunFact')
    PhaseTwoScenario = apps.get_model('api', 'PhaseTwoScenario')
    PhaseTwoReflection = apps.get_model('api', 'PhaseTwoReflection')
    # We need the historical version of CareerTrack to access the old career_path field
    OldCareerTrack = apps.get_model('api', 'CareerTrack') 
    LearningPage = apps.get_model('api', 'LearningPage')

    for old_track in OldCareerTrack.objects.all():
        learning_page = LearningPage.objects.filter(career_track=old_track).first() # Assuming page 1 exists and is the target
        if learning_page:
            # Link existing PhaseTwoDayInLife
            try:
                # Use the historical model state to access career_path
                day_in_life_instance = PhaseTwoDayInLife.objects.get(career_path=old_track)
                day_in_life_instance.learning_page = learning_page
                day_in_life_instance.save()
            except PhaseTwoDayInLife.DoesNotExist:
                pass # No existing day in life for this track
            except PhaseTwoDayInLife.MultipleObjectsReturned:
                 # Handle if somehow multiple exist, maybe link the first one found?
                 day_in_life_instance = PhaseTwoDayInLife.objects.filter(career_path=old_track).first()
                 if day_in_life_instance:
                      day_in_life_instance.learning_page = learning_page
                      day_in_life_instance.save()

            # Link existing PhaseTwoFunFact
            for fun_fact_instance in PhaseTwoFunFact.objects.filter(career_path=old_track):
                fun_fact_instance.learning_page = learning_page
                fun_fact_instance.save()

            # Link existing PhaseTwoScenario
            for scenario_instance in PhaseTwoScenario.objects.filter(career_path=old_track):
                scenario_instance.learning_page = learning_page
                scenario_instance.save()

            # Link existing PhaseTwoReflection
            for reflection_instance in PhaseTwoReflection.objects.filter(career_path=old_track):
                reflection_instance.learning_page = learning_page
                reflection_instance.save()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0002_phasetwodayinlife_phasetwofunfact_phasetworeflection_and_more'),
    ]

    operations = [
        # Add the new nullable learning_page fields first
        migrations.AddField(
            model_name='phasetwodayinlife',
            name='learning_page',
            field=models.OneToOneField(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='day_in_life', to='api.learningpage'),
        ),
        migrations.AddField(
            model_name='phasetwofunfact',
            name='learning_page',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='fun_facts', to='api.learningpage'),
        ),
        migrations.AddField(
            model_name='phasetworeflection',
            name='learning_page',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='reflections', to='api.learningpage'),
        ),
        migrations.AddField(
            model_name='phasetwoscenario',
            name='learning_page',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='scenarios', to='api.learningpage'),
        ),

        # Run the data migration AFTER adding the nullable fields
        migrations.RunPython(link_existing_phase_two_content_to_learning_pages, reverse_code=migrations.RunPython.noop),

        # Remove the old career_path fields
        migrations.RemoveField(
            model_name='phasetwodayinlife',
            name='career_path',
        ),
        migrations.RemoveField(
            model_name='phasetwofunfact',
            name='career_path',
        ),
        migrations.RemoveField(
            model_name='phasetworeflection',
            name='career_path',
        ),
        migrations.RemoveField(
            model_name='phasetwoscenario',
            name='career_path',
        ),

        # Alter the new learning_page fields to be non-nullable
        migrations.AlterField(
            model_name='phasetwodayinlife',
            name='learning_page',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='day_in_life', to='api.learningpage'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='phasetwofunfact',
            name='learning_page',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fun_facts', to='api.learningpage'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='phasetworeflection',
            name='learning_page',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reflections', to='api.learningpage'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='phasetwoscenario',
            name='learning_page',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scenarios', to='api.learningpage'),
            preserve_default=False,
        ),
    ]
